// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Technical_Task.Data;

namespace Technical_Task.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Technical_Task.Data.DTO.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId");

                    b.Property<DateTime?>("DeletedDateUtc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("TTCity");
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedDateUtc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TTCountry");
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.WeatherOfTheDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<double>("Cloudiness");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<DateTime>("DateUtc");

                    b.Property<DateTime?>("DeletedDateUtc");

                    b.Property<string>("ForecastMessage");

                    b.Property<double>("Humidity");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Pressure");

                    b.Property<double>("RainChance");

                    b.Property<double>("WindSpeed");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TTWeatherOfTheDay");
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.WeatherTemperatureOfTheDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DayTimeUtc");

                    b.Property<double>("TemperatureC");

                    b.Property<long>("WeatherOfTheDayId");

                    b.HasKey("Id");

                    b.HasIndex("WeatherOfTheDayId");

                    b.ToTable("TTWeatherTemperatureOfTheDay");
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.City", b =>
                {
                    b.HasOne("Technical_Task.Data.DTO.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.WeatherOfTheDay", b =>
                {
                    b.HasOne("Technical_Task.Data.DTO.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Technical_Task.Data.DTO.WeatherTemperatureOfTheDay", b =>
                {
                    b.HasOne("Technical_Task.Data.DTO.WeatherOfTheDay", "WeatherOfTheDay")
                        .WithMany("WeatherTemperatures")
                        .HasForeignKey("WeatherOfTheDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
